<?php
/**
 * @file
 * IWPS Module
 * Scorekeeping for individual tournaments.
 * 
 * TODO: Remove poets from draw when users are 
 * removed from tournament.
 * TODO: Breadcrumbs
 */

module_load_include('inc', 'iwps', 'iwps.utils');   

/**
 * Implement hook_menu().
 */

function iwps_menu() {
  $items = array();
    $items['node/%node/bouts'] = array(
    'title' => 'Bouts',
    'description' => 'Draw for this tournament.',
    'page callback' => 'iwps_bouts_list',
    'page arguments' => array(1),
    'access callback' => 'iwps_bouts_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    );
  $items['node/%node/poets'] = array(
    'title' => 'Competing Poets',
    'description' => 'Poets competing in this tournament.',
    'page callback' => 'iwps_poet_list',
    'page arguments' => array(1),
    'access callback' => 'iwps_bouts_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    );
  $items['node/%node/draw'] = array(
    'title' => 'Set Draw',
    'description' => 'Draw for this tournament.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iwps_draw_form', 1),
    'access callback' => 'iwps_draw_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
    );
  $items['node/%node/results'] = array(
    'title' => 'Bout Results',
    'description' => 'Final scores and ranks for this bout.',
    'page callback' => 'iwps_bout_results',
    'page arguments' => array(1),
    'access callback' => 'iwps_bout_results_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
    );
  $items['node/%node/scores'] = array(
    'title' => 'Preliminary Scores',
    'description' => 'Scores for this bout.',
    'page callback' => 'iwps_scores_page',
    'page arguments' => array(1),
    'access callback' => 'iwps_bouts_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 12,
    );
  $items['node/%node/finals'] = array(
    'title' => 'Finals',
    'description' => 'The final bout.',
    'page callback' => 'iwps_finals_page',
    'page arguments' => array(1),
    'access callback' => 'iwps_bouts_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 14,
    );
  return $items;
};

/**
 * Callback access method for draw tab.
 */
function iwps_draw_access($node) {
  return $node->type == 'individual_tournament' && user_access('edit any individual_tournament content');
}

/**
 * Callback access method for bouts tab.
 */
function iwps_bouts_access($node) {
  return $node->type == 'individual_tournament';  
}

/**
 * Callback access method for bout results tab.
 */
function iwps_bout_results_access($node) {
 $bout_type = NULL;
  if (isset($node->field_bout_type[$node->language])) {
    $bout_type = $node->field_bout_type[$node->language][0]['value'];
  }
  return $node->type == 'scorecreep_bout' && $bout_type == 'individual';  
}

/**
 * Callback method for draw tab.
 */
function iwps_draw_form($form, &$form_state, $node) {
  drupal_set_title($node->field_shortname[$node->language][0]['value'] . ' : Set Draw');

  $form_state['iwps']['node'] = $node;

  $num_competitors = $node->field_num_competitors['und'][0]['value'];
  $draw = array();
  $result = db_query('SELECT uid, draw_number FROM {iwps_draw} WHERE tid = :tid', array(':tid' => $node->nid));
  foreach ($result as $record) {
    $draw[$record->uid] = $record->draw_number;
  }
  $comp = field_get_items('node', $node, 'field_competing_poets');
  $users = array();
  if ($comp) {
    foreach ($comp as $u) {
      $users[] = $u['uid'];
    }
    $competitors = user_load_multiple($users);
    $form['draw'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);
    foreach ($competitors as $uid => $user) {
      $form['draw'][$uid] = array(
        '#type' => 'textfield',
        '#title' => t('%name draw number', array('%name' => $user->name)),
        '#description' => t('Draw for this user'),
        '#size' => 10,
        '#maxlength' => 2,
        '#required' => TRUE,
      ); 
      if (isset($draw[$uid])) {
        $form['draw'][$uid]['#default_value'] = $draw[$uid];
      }
    }
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save Draw'),
    );
  }
  else {
      $form['disclaimer'] = array(
        '#prefix' => '<p>',
        '#markup' => t('No poets assigned to this tournament. Assign competitors to this tournament on the edit screen.'),
        '#suffix' => '</p>',
      );
  }
  return $form;
}

/**
 * Implements hook_form_alter.
 */
function iwps_form_individual_performance_node_form_alter(&$form, &$form_state) {

  if (is_numeric(arg(4)) && is_numeric(arg(6)) && is_numeric(arg(7))) {
    $performer = user_load(arg(4));
    $bout = node_load(arg(6));

    $action = arg(1) == 'add'? 'Add' : 'Edit';
    // TODO check if a performance for this performer/rotation already exists
    // actually we need to do that in the save process
    $bout_id = field_get_items('node', $bout, 'field_bout');
    $rotation = arg(7);
    if ($action === 'Add') {
      $existing_performance = _load_performances_in_bout($bout_id[0]['tid'], $rotation, $performer->uid);
      if ($existing_performance != NULL) {
        drupal_set_message(t('Performance for this rotation exists, switched to edit form.'));
        $path = 'node/' . $existing_performance->nid . '/edit/performer/' . $performer->uid . '/bout/' . $bout->nid . '/' . $rotation;
        drupal_goto($path);
      }
    }

    drupal_set_title(t($action . ' performance for ' . $performer->name));

    // default poem name is "untitled"
    $form['title']['#default_value'] = t('Untitled');

    $form_state['iwps']['performer'] = $performer;
    $form_state['iwps']['rotation'] = $rotation;
    $form_state['iwps']['bout'] = $bout;
    $form_state['iwps']['bout_id'] = $bout_id[0]['tid'];
    $bout_type = field_get_items('node', $bout, 'field_bout_type');


    $form['field_individual_performer']['und']['#type'] = 'value';
    $form['field_individual_performer']['und']['#value'] =  $performer->uid;
    

    $form['field_rotation']['und'][0]['value']['#default_value'] =  $rotation;

    // Converting the bout from textfield to 'value' so its not exposed in this form
    $form['field_bout']['und']['#type'] = 'value';
    $form['field_bout']['und']['#value'] =  $bout_id[0]['tid'];

    $form['actions']['submit']['#submit'][] = 'iwps_performance_set_redirect'; 
  }
}


/**
 * Implements hook_form_validate().
 */

function iwps_node_validate($node, $form, &$form_state) {
  if ($node->type == 'individual_performance') {
    $pid = $form_state['iwps']['performer']->uid;
    $bout_id = $form_state['iwps']['bout_id'];
    $rotation = $form_state['iwps']['rotation']; 
    $performance = _load_performances_in_bout($bout_id, $rotation, $pid);
    if (!isset($node->nid) && $performance != NULL) { 
      drupal_get_messages();
      drupal_set_message(t('Already a performance for this poet in this rotation, switched to edit mode.'), 'error');
      $path = 'node/' . $performance->nid . '/edit/performer/' . $form_state['iwps']['performer']->uid . '/bout/' . $form_state['iwps']['bout']->nid . '/' . $form_state['iwps']['rotation'];
      drupal_goto($path);
    }
  }
}

/**
 * Handler to set the redirect on a performance submit
 * back to the bout.
 */
function iwps_performance_set_redirect( $form, &$form_state) {
  $bout = $form_state['iwps']['bout'];
  $bout_id = $bout->nid;
  $bout_type = field_get_items('node', $bout, 'field_bout_type');
  $redirect = 'node/' . $bout_id;
  $cat = field_get_items('node', $bout, 'field_tournament');

  // The finals is a special case, redirect to the tourney
  if ( $bout_type[0]['value'] == 'individual_final') {
    $tournament_nid = field_get_items('node', $bout, 'field_tournament');
    $redirect = 'node/' . $tournament_nid[0]['nid'] . '/finals'; 
  }
  //$alias = drupal_lookup_path('alias', 'node/' . $bout_id);
  $form_state['redirect'] = $redirect;
}

/**
 * Implents hook_save().
 */
/**
* Implements hook_insert().
*/
function iwps_individual_performance_update($node) {
  // log details of the job posting to watchdog
  watchdog('iwps', 'A performance post updated: ' . $node->title . ' for performer: ' . $node->performer['und'][0]['value'] . ' was updated by UID: ' . $node->uid, $variables = array(),
  WATCHDOG_NOTICE, $link = 'node/' . $node->nid);
}



/**
 * Validate the draw form.
 */
function iwps_draw_form_validate($form, &$form_state) {
  // We notify the form API that this field has failed validation.
  $draw = $form_state['values']['draw'];
  $max = intval($form_state['iwps']['node']->field_num_competitors['und'][0]['value']);

  foreach ($draw as $uid => $val) {
    if (!is_numeric($val) || intval($val) > $max) {
      $user = user_load($uid);
       form_set_error('draw][' . $uid , t('%name has a non-numeric or out of range entry.', array('%name' => $user->name)));
    }

    foreach ($draw as $ouid => $oval) {
      if ($uid != $ouid && $val == $oval ) {
      $user = user_load($uid);
       form_set_error('draw][' . $uid , t('%name has a duplicate draw number', array('%name' => $user->name)));
      }
    }
  }
}

/**
 * Form builder; display confirmation for draw form.
 */
function iwps_draw_form_submit($form, &$form_state) {
  $nid = $form_state['iwps']['node']->nid;

  // delete the previous draw.
  $result = db_query('DELETE FROM {iwps_draw} WHERE tid = :tid', array(':tid' => $nid));

  $draw = $form_state['values']['draw'];
  $sql = '';

  foreach ($draw as $uid => $val) {
    // create record
    $record = new stdClass();
    $record->tid = $nid;
    $record->uid = $uid;
    $record->draw_number = $val;
    drupal_write_record('iwps_draw', $record);
  }

  drupal_set_message(t('Draw for %node has been saved.', array('%node' => $form_state['iwps']['node']->title)));
}

/**
 * Display the tournament_bouts_list view, passing in the tid for the tournament.
 */
function iwps_bouts_list($node) {
  drupal_set_title($node->field_shortname[$node->language][0]['value'] . ' : Bouts');
  $view = views_get_view('tournament_bouts_list');
  $tids = field_get_items('node', $node, 'field_term_tournament');
  $tid = isset($tids) ? $tids[0]['tid'] : 0;
  $args[] = $tid;

  $display_id = 'default';
  $output = $view->execute_display($display_id, $args);

  return $output;
}

/**
 * Callback function for listing poets in tournament.
 */
function iwps_poet_list($node) {
  drupal_set_title($node->field_shortname[$node->language][0]['value'] . ' : Poets');
  $poets = array();
  $names = array();
  $output = t('No poets added to roster yet.');
  if (isset($node->field_competing_poets[$node->language])) {
    foreach ($node->field_competing_poets[$node->language] as  $uid) {
      $poets[] = $uid['uid'];
    }
    $users = user_load_multiple($poets);
    foreach ($users as $uid => $user) {
      $names[] = $user->name;
      $output = '';
    }
    if (count($poets) > 0) {
      $output .= theme('item_list', array('items' => $names, 'title' => t('Competing Poets')));
    }
  }
  return $output;
}

/** 
 * Callback for displaying the finals page.
 */
function iwps_finals_page($node) {
  drupal_set_title($node->field_shortname[$node->language][0]['value'] . ' : Finals');
  $output = t('The preliminary bouts are not complete.');
  $finals_node =  _iwps_get_finals_node($node);
  if (!$finals_node) {
    return t('Error getting finals node.');
  }

  $bout_term_arr = field_get_items('node', $finals_node, 'field_bout');
  $bout_tid = $bout_term_arr[0]['tid'];


  $num_competitors = isset($node->field_num_competitors[$node->language][0]['value'])? $node->field_num_competitors[$node->language][0]['value']:-1;
  $allscores = _iwps_get_all_scores($node);

  // competition not complete
  if (count($allscores) < $num_competitors) {
    return $output;
  }
  $scores = _iwps_get_final_place($allscores);

  $num_finalists = isset($node->field_num_finalists[$node->language][0]['value'])? $node->field_num_finalists[$node->language][0]['value']:0;
  $finalists = _iwps_get_finalists($scores, $num_finalists);

  $calibration = $scores[count($finalists)];
  $calibration['finals'] = _load_performances_in_bout($bout_tid, 0);

  $scorekeeper = user_access('create individual_performance content');

  // load all the scores for this bout

  $output = '<h2>Calibration</h2>';
  $header = array(t('Performer'), t('Score'));
  if ($scorekeeper) {
     $header[] = t('Action');
  }

  // output the calibration poet
  $row = array(
    "performer" => $calibration['performer'],
    "score" => isset($calibration['finals']->field_score[$node->language][0]['value']) ? $calibration['finals']->field_score[$node->language][0]['value'] : '' ,
  );

  if ($scorekeeper) {
     if ($row["score"] !== '') {
       $row['action'] =  l('Edit', 'node/' . $calibration['finals']->nid . '/edit/performer/' . $calibration['uid'] . '/bout/' . $finals_node->nid . '/0') ;
     }
     else {
       $row['action'] =  l('Enter', 'node/add/individual-performance/performer/' . $calibration['uid'] . '/bout/' . $finals_node->nid . '/0');
     }
  }
  $output .= theme('table', array('header' => $header, 'rows' => array($row)));

  // output the first rotation, has all the poets
  $output .= '<h2>Round 1</h2>';
  $output .= '<div class="iwps_legal">This is not the actual order.</div>';

  $rows = array();
  $r1scores = _iwps_get_ranks_in_bout_rotation($bout_tid, 1, 'ASSOC');
   
  for ($i = 0; $i < count($finalists); $i++) {
    $uid = $finalists[$i]['uid'];
    if (isset($r1scores[$uid])) {
      $perf = $r1scores[$uid];
      $score = $r1scores[$uid]['score'];
    }
    else {
      $score = '';
    }

    $row = array(
      "performer" => $finalists[$i]['performer'],
      "score" => $score,
    );

    if ($scorekeeper) {
       if ($row["score"] !== '') {
         $row['action'] =  l('Edit', 'node/' . $perf['nid'] . '/edit/performer/' . $finalists[$i]['uid'] . '/bout/' . $finals_node->nid . '/1') ;
       }
       else {
         $row['action'] =  l('Enter', 'node/add/individual-performance/performer/' . $finalists[$i]['uid'] . '/bout/' . $finals_node->nid . '/1');
       }
    }
    $rows[] = $row;
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  // check scores, if rotation 1 is complete, output rotation 2
  if (count($r1scores) < count($finalists)) {
    $output .= "<p>Round 1 is not complete.</p>";
    return $output;
  }

  $output .= "<h2>Round 2</h2>";

  // take the top 7 from round 1
  $finalists = _iwps_get_finalists(array_values($r1scores), 7, 'rank');
  $rows = array();
  $r2scores = _iwps_get_ranks_in_bout_rotation($bout_tid, 2, 'ASSOC');

  for ($i = 0; $i < count($finalists); $i++) {
    $uid = $finalists[$i]['uid'];
    if (isset($r2scores[$uid])) {
      $perf = $r2scores[$uid];
      $score = $r2scores[$uid]['score'];
    }
    else {
      $score = '';
    }

    $row = array(
      "performer" => $finalists[$i]['performer'],
      "score" => $score,
    );

    if ($scorekeeper) {
       if ($row["score"] !== '') {
         $row['action'] =  l('Edit', 'node/' . $perf['nid'] . '/edit/performer/' . $finalists[$i]['uid'] . '/bout/' . $finals_node->nid . '/2') ;
       }
       else {
         $row['action'] =  l('Enter', 'node/add/individual-performance/performer/' . $finalists[$i]['uid'] . '/bout/' . $finals_node->nid . '/2');
       }
    }
    $rows[] = $row;
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
   if (count($r2scores) < count($finalists)) {
    $output .= "<p>Round 2 is not complete.</p>";
    return $output;
  }

  $output .= "<h2>Final Round</h2>";

  // take the top 4 from round 1
  $finalists = _iwps_get_finalists(array_values($r2scores), 4, 'rank');
  $rows = array();
  $r3scores = _iwps_get_ranks_in_bout_rotation($bout_tid, 3, 'ASSOC');


  array_unshift($header, t("Rank"));

  for ($i = 0; $i < count($finalists); $i++) {
    $uid = $finalists[$i]['uid'];
    if (isset($r3scores[$uid])) {
      $perf = $r3scores[$uid];
      $score = $r3scores[$uid]['score'];
      $rank = $r3scores[$uid]['rank'];
    }
    else {
      $score = '';
      $rank = '';
    }

    $row = array(
      "rank" => $rank,
      "performer" => $finalists[$i]['performer'],
      "score" => $score,
    );

    if ($scorekeeper) {
       if ($row["score"] !== '') {
         $row['action'] =  l('Edit', 'node/' . $perf['nid'] . '/edit/performer/' . $finalists[$i]['uid'] . '/bout/' . $finals_node->nid . '/3') ;
       }
       else {
         $row['action'] =  l('Enter', 'node/add/individual-performance/performer/' . $finalists[$i]['uid'] . '/bout/' . $finals_node->nid . '/3');
       }
    }
    $rows[] = $row;
  }
  usort($rows, "array_sort_by_rank");
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  
  return $output;
}

function iwps_create_performance_row($data) {


}

/**
 * Implements hook_view().
 */
function iwps_node_view($node, $view_mode) {
  $bout_type = NULL;
  if (isset($node->field_bout_type[$node->language])) {
    $bout_type = $node->field_bout_type[$node->language][0]['value'];
  }
  if ($view_mode == 'full' && $bout_type == 'individual') {
    $node = _iwps_preliminary_bout_view($node);     
  }
  elseif ($view_mode == 'full' && $bout_type == 'individual_final') {
    //$node = _iwps_final_bout_view($node);
  }
  return $node;
}

/**
 * Final bout view.
 */
function _iwps_final_bout_view($node) {
  //$finals_node = _iwps_get_finals_node($node);
  //drupal_set_title($node->field_shortname[$node->language][0]['value'] . ' : Finals');
  return $node;
}

/**
 * Prelim bout.
 */
function _iwps_preliminary_bout_view($node) {
  // get all performers for this bout from the draw  
 $tourney = field_get_items('node', $node, 'field_tournament');
 $tid = $tourney[0]['nid'];

 $users = _load_users_by_bout_number($node->nid, $tid);   
 if (count($users) <= 0) {
  $node->content['scores'] = array(
    '#markup' => t('The draw is not yet complete.'),
    '#weight' => 100,
  );
  // TODO can probably just return here
 }
 else {
   $bout_term_arr = field_get_items('node', $node, 'field_bout');
   $bout_id = $bout_term_arr[0]['tid'];

   $header = array(t('Performer'), t('Score'), t('Rank*'));
    
    // Handle Rotation 1 
   $output = '<h2>Rotation 1</h2>';
   $scores = array();
   $rows = array();
   $ranks = array();
   $weight = 0;
   foreach ($users as $uid => $u) {
     // check if there are existing scores for this user
     // TODO this could be one call to save DB loads
     $score = _load_performances_in_bout($bout_id, 1, $u->uid);
     $tid = $node->field_bout;
     // push score after this
     $row = array(
       'performer' => l($u->name, 'user/' . $u->uid),
       'score' => count($score) ? $score->field_score[$node->language][0]['value'] : '' ,
       'rank' => '',
     );

     // add rank
     if ($score) {
       $ranks = _iwps_get_ranks_in_bout_rotation($bout_id, 1, 'ASSOC');
       $row['rank'] = $ranks[$u->uid]['rank'];
     }

     // check if user has admin access,
     // push action column if so
     if (user_access('create individual_performance content')) {
       if ($score) {
         $row['action'] =  l('Edit', 'node/' . $score->nid . '/edit/performer/' . $u->uid . '/bout/' . $node->nid . '/1') ;
       }
       else {
         $row['action'] =  l('Enter', 'node/add/individual-performance/performer/' . $u->uid . '/bout/' . $node->nid . '/1');
       }
     }
      $rows[] = $row;
    }
    // check if user has admin access to scores
    // add "action" column if so
    if (user_access('create individual_performance content')) {
      $header[] = t('Action');
    }
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
    // END of Rotation 1

          // Handle Rotation 2
    if (count($ranks) > 0) {
    // sort ranks 
      $ranks = _iwps_sort_rotation($ranks, $users);
      $rows = array();

      $output .= t('<h2>Rotation 2</h2>');
      foreach ($ranks as $uid => $rank) {
        $uid = $rank['uid'];
        $score = _load_performances_in_bout($bout_id, 2, $uid);
        $row = array(
          'performer' => l($rank['performer'], 'user/' . $uid),
          'score' => count($score) ? $score->field_score[$node->language][0]['value'] : '',
          'rank' => '',
        );

        // add rank
        if ($score) {
          $ranks = _iwps_get_ranks_in_bout_rotation($bout_id, 2, 'ASSOC');
          $row['rank'] = $ranks[$uid]['rank'];
        }

        // check if user has admin access,
        // push action column if so
        if (user_access('create individual_performance content')) {
          if ($score) {
            $row['action'] =  l('Edit', 'node/' . $score->nid . '/edit/performer/' . $uid . '/bout/' . $node->nid . '/2') ;
          }
          else {
            $row['action'] =  l('Enter', 'node/add/individual-performance/performer/' . $uid . '/bout/' . $node->nid . '/2');
          }
        }
        $rows[] = $row;
      }
      $output .= theme('table', array('header' => $header, 'rows' => $rows));
    }

    $output .= t('<p class="small">* Rank in rotation</p>');
    $node->content['scores'] = array(
      '#markup' => $output,
      '#weight' => 100,
    );
  }    

 if (count($users) <= 0) {
  $node->content['scores'] = array(
    '#markup' => t('The draw is not yet complete.'),
    '#weight' => 100,
  );
 }
 else {
   $bout_term_arr = field_get_items('node', $node, 'field_bout');
   $bout_id = $bout_term_arr[0]['tid'];

   $header = array(t('Performer'), t('Score'), t('Rank*'));
    
    // Handle Rotation 1 
   $output = '<h2>Rotation 1</h2>';
   $scores = array();
   $rows = array();
   $ranks = array();
   $weight = 0;
   foreach ($users as $uid => $u) {
     // check if there are existing scores for this user
     // TODO this could be one call to save DB loads
     $score = _load_performances_in_bout($bout_id, 1, $u->uid);
     $tid = $node->field_bout;
     // push score after this
     $row = array(
       'performer' => l($u->name, 'user/' . $u->uid),
       'score' => count($score) ? $score->field_score[$node->language][0]['value'] : '' ,
       'rank' => '',
     );

     // add rank
     if ($score) {
       $ranks = _iwps_get_ranks_in_bout_rotation($bout_id, 1, 'ASSOC');
       $row['rank'] = $ranks[$u->uid]['rank'];
      }

      // check if user has admin access,
      // push action column if so
      if (user_access('create individual_performance content')) {
        if ($score) {
          $row['action'] =  l('Edit', 'node/' . $score->nid . '/edit/performer/' . $u->uid . '/bout/' . $node->nid . '/1') ;
        }
        else {
          $row['action'] =  l('Enter', 'node/add/individual-performance/performer/' . $u->uid . '/bout/' . $node->nid . '/1');
        }
      }
      $rows[] = $row;
    }
    // check if user has admin access to scores
    // add "action" column if so
    if (user_access('create individual_performance content')) {
      $header[] = t('Action');
    }
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
    // END of Rotation 1

          // Handle Rotation 2
    if (count($ranks) > 0) {
    // sort ranks 
      $ranks = _iwps_sort_rotation($ranks, $users);
      $rows = array();

      $output .= t('<h2>Rotation 2</h2>');
      foreach ($ranks as $uid => $rank) {
        $uid = $rank['uid'];
        $score = _load_performances_in_bout($bout_id, 2, $uid);
        $row = array(
          'performer' => l($rank['performer'], 'user/' . $uid),
          'score' => count($score) ? $score->field_score[$node->language][0]['value'] : '',
          'rank' => '',
        );

        // add rank
        if ($score) {
          $ranks = _iwps_get_ranks_in_bout_rotation($bout_id, 2, 'ASSOC');
          $row['rank'] = $ranks[$uid]['rank'];
        }

        // check if user has admin access,
        // push action column if so
        if (user_access('create individual_performance content')) {
          if ($score) {
            $row['action'] =  l('Edit', 'node/' . $score->nid . '/edit/performer/' . $uid . '/bout/' . $node->nid . '/2') ;
          }
          else {
            $row['action'] =  l('Enter', 'node/add/individual-performance/performer/' . $uid . '/bout/' . $node->nid . '/2');
          }
        }
        $rows[] = $row;
      }
      $output .= theme('table', array('header' => $header, 'rows' => $rows));
    }

    $output .= t('<p class="small">* Rank in rotation</p>');
    $node->content['scores'] = array(
      '#markup' => $output,
      '#weight' => 100,
    );
  }
}

/**
 * Implements hook_theme().
 */
function iwps_theme() {
  return array(
    'scores' => array(
      'variables' => array('performer' => NULL, 'score' => NULL),
      'template' => 'scores',
      ),
    );
}

function iwps_bout_results($node) {
  $output = t('This bout is not yet complete.');
  $bout_term_arr = field_get_items('node', $node, 'field_bout');
  $bout_id = $bout_term_arr[0]['tid'];
  $ranks_1 = _iwps_get_ranks_in_bout_rotation($bout_id, 1, 'ASSOC');
  $ranks_2 = _iwps_get_ranks_in_bout_rotation($bout_id, 2, 'ASSOC');
  
  if (count($ranks_1) > 0 && count($ranks_1) == count($ranks_2)) {
    $rows = array();
    foreach ($ranks_1 as $uid => $rank) {
      $row = array(
        'performer' => $rank['performer'],
        'r1rank' => $rank['rank'],
        'r1score' => $rank['score'],
      );
      if (isset($ranks_2)) {
        $r2 = $ranks_2[$uid];
        $row['r2rank'] = $r2['rank'];
        $row['r2score'] = $r2['score'];
        $row['totalrank'] = $rank['rank'] + $r2['rank'];
        $row['totalscore'] = $rank['score'] + $r2['score'];
      }
      $rows[] = $row;
    }
    _iwps_sort_bout_results($rows);

    $header = array(t('Performer'), t('Rank 1'), t('Score 1'), t('Rank 2'), t('Score 2'), t('Total Rank'), t('Total Score'));
    $output = theme('table', array('header' => $header, 'rows' => $rows));
  }

  return $output;
}

/**
 * Callback function for scores page.
 */
function iwps_scores_page($node) {
  drupal_set_title($node->field_shortname[$node->language][0]['value'] . ' : Preliminary Scores');
  $output = t('There are no scores for this tournament.');

  // get tournament taxonomy term
  $cat = field_get_items('node', $node, 'field_term_tournament');
  if ($cat) {
    $allscores = _iwps_get_final_place(_iwps_get_all_scores($node)); 
    // go through the allscores array setting the rows for the table
    $header = array(t("Place"), t("Performer"), t("Rank 1"), t("Score 1"), t("Rank 2"), t("Score 2"), t("Rank 3"), t("Score 3"), t("Rank 4"), t("Score 4"), t("Total Rank"), t("Total Score"));
    $rows = _iwps_generate_rows($allscores);
    if (count($rows) > 0) {
      $output = theme('table', array('header' => $header, 'rows' => $rows));
    }
  }
  else {
    $output = t('Tournament category not set, this issue has been logged.');
    watchdog('IWPS', $node->title . ' does not have a tournament taxonomy.');
  }
  return $output;
}

/**
 * Final bout method.
 */
function _iwps_get_finals_node($node) {
  $term_arr = field_get_items('node', $node, 'field_term_tournament');
  $tournament_tid = $term_arr[0]['tid'];
  $children = taxonomy_get_children($tournament_tid);
  
  foreach ($children as $key => $value) {
    if (isset($value->name) && $value->name == 'Finals') {
      $tid = $value->tid;
      break;
    }
  }
  if (!isset($tid) ) {
    watchdog('iwps', 'Finals bout information is missing');
    throw new Exception('Finals bout information is missing. This has been logged.');
    return $node;
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('type', 'scorecreep_bout', '=')
    ->fieldCondition('field_bout', 'tid', (array)$tid, 'IN', 0);
  $result = $query->execute();
  $nodes = array_keys($result['node']);
  return  node_load($nodes[0]);
}
