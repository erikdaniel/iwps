<?php
/**
 * @file
 * IWPS Module
 * Scorekeeping for individual tournaments.
 * 
 * TODO: Remove poets from draw when users are 
 * TODO: Breadcrumbs
 * removed from tournament.
 */

module_load_include('inc', 'iwps', 'iwps.utils');   

/**
 * Implement hook_menu().
 */

function iwps_menu() {
  $items = array();
    $items['node/%node/bouts'] = array(
    'title' => 'Bouts',
    'description' => 'Draw for this tournament.',
    'page callback' => 'iwps_bouts_list',
    'page arguments' => array(1),
    'access callback' => array('iwps_bouts_access'),
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    );
  $items['node/%node/poets'] = array(
    'title' => 'Competing Poets',
    'description' => 'Poets competing in this tournament.',
    'page callback' => 'iwps_poet_list',
    'page arguments' => array(1),
    'access callback' => array('iwps_bouts_access'),
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    );
  $items['node/%node/draw'] = array(
    'title' => 'Set Draw',
    'description' => 'Draw for this tournament.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iwps_draw_form', 1),
    'access callback' => array('iwps_draw_access'),
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
    );

  /*
  $items['node/%node/scores'] = array(
    'title' => 'Scores',
    'description' => 'Scores for this bout.',
    'page callback' => 'iwps_bouts_list',
    'page arguments' => array(1),
    'access callback' => array('iwps_bouts_access'),
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    );
  */

/*
  $items['node/add/individual-performance/performer/%user/bout/%node'] = array(
    'title' => 'Add IWPS Performance',
    'description' => 'Enter a performance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iwps_performance_form', 4, 6),
    'access callback' => 'user_access',
    'access arguments' => array('scores admin'),
    'type' => MENU_NORMAL_ITEM,
  );
  */
  return $items;
};

/**
 * Callback access method for draw tab.
 */
function iwps_draw_access($node) {
  return $node->type == 'individual_tournament' && user_access('administer content');
}

/**
 * Callback access method for bouts tab.
 */
function iwps_bouts_access($node) {
  return $node->type == 'individual_tournament';  
}

/**
 * Callback method for draw tab.
 */
function iwps_draw_form($form, &$form_state, $node) {
  $form_state['iwps']['node'] = $node;

  $num_competitors = $node->field_num_competitors['und'][0]['value'];
  $draw = array();
  $result = db_query('SELECT uid, draw_number FROM {iwps_draw} WHERE tid = :tid', array(':tid' => $node->nid));
  foreach($result as $record) {
    $draw[$record->uid] = $record->draw_number;
  }
  $comp = field_get_items('node', $node, 'field_competing_poets');
  $users = array();
  if ($comp) {
    foreach ($comp as $u) {
      $users[] = $u['uid'];
    }
    $competitors = user_load_multiple($users);
    $form['draw'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);
    foreach ($competitors as $uid => $user) {
      $form['draw'][$uid] = array(
        '#type' => 'textfield',
        '#title' => t('%name draw number', array('%name' => $user->name)),
        '#description' => t('Draw for this user'),
        '#size' => 10,
        '#maxlength' => 2,
        '#required' => TRUE,
      ); 
      if (isset($draw[$uid])) {
        $form['draw'][$uid]['#default_value'] = $draw[$uid];
      }
    }
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save Draw'),
    );
  }
  else {
      $form['disclaimer'] = array(
        '#prefix' => '<p>',
        '#markup' => t('No poets assigned to this tournament. Assign competitors to this tournament on the edit screen.'),
        '#suffix' => '</p>',
      );
  }
  return $form;
}

/**
 * Implements hook_form_alter.
 */
function iwps_form_individual_performance_node_form_alter(&$form, &$form_state) {

  if (is_numeric(arg(4)) && is_numeric(arg(6)) && is_numeric(arg(7))) {
    $performer = user_load(arg(4));
    $node = node_load(arg(6));
    $action = arg(2) == 'add'? 'Add' : 'Edit';
    drupal_set_title(t($action . ' performance for ' . $performer->name));

    $form_state['iwps']['performer'] = $performer;
    $form_state['iwps']['bout'] = $node;

    $form['title']['#default_value'] = t('Untitled');

    $form['field_individual_performer']['und']['#type'] = 'value';
    $form['field_individual_performer']['und']['#value'] =  $performer->uid;
    
    $rotation = arg(7);

    $form['field_rotation']['und'][0]['value']['#default_value'] =  $rotation;

    // Converting the bout from textfield to 'value' so its not exposed in this form
    $bout_id = field_get_items('node', $node, 'field_bout');
    $form['field_bout']['und']['#type'] = 'value';
    $form['field_bout']['und']['#value'] =  $bout_id[0]['tid'];

    $form['actions']['submit']['#submit'][] = 'iwps_performance_set_redirect'; 
  }
}

/**
 * Handler to set the redirect on a performance submit
 * back to the bout.
 */
function iwps_performance_set_redirect( $form, &$form_state) {
  $bout_id = $form_state['iwps']['bout']->nid;
  // TODO redo this to get the correct bout id
  $alias = drupal_lookup_path('alias', 'node/' . $bout_id);
  $form_state['redirect'] = 'node/' . $bout_id;
}


/**
* Validate the form.
*/
function iwps_draw_form_validate($form, &$form_state) {
  // We notify the form API that this field has failed validation.
  $draw = $form_state['values']['draw'];
  $max = intval($form_state['iwps']['node']->field_num_competitors['und'][0]['value']);

  foreach ($draw as $uid => $val) {
    if (!is_numeric($val) || intval($val) > $max) {
      $user = user_load($uid);
       form_set_error('draw][' . $uid , t('%name has a non-numeric or out of range entry.', array('%name' => $user->name)));
    }

    foreach ($draw as $ouid => $oval) {
      if ($uid != $ouid && $val == $oval ) {
      $user = user_load($uid);
       form_set_error('draw][' . $uid , t('%name has a duplicate draw number', array('%name' => $user->name)));
      }
    }
  }
}

/**
 * Form builder; display confirmation for draw form.
 */
function iwps_draw_form_submit($form, &$form_state) {
  $nid = $form_state['iwps']['node']->nid;

  // delete the previous draw.
  $result = db_query('DELETE FROM {iwps_draw} WHERE tid = :tid', array(':tid' => $nid));

  $draw = $form_state['values']['draw'];
  $sql = '';

  foreach($draw as $uid => $val) {
    // create record
    $record = new stdClass();
    $record->tid = $nid;
    $record->uid = $uid;
    $record->draw_number = $val;
    drupal_write_record('iwps_draw', $record);
  }

  drupal_set_message(t('Draw for %node has been saved.', array('%node' => $form_state['iwps']['node']->title)));
}
/**
 * Sets up an empy page we can drop our block view onto.
 */
function iwps_bouts_list($node) {
  drupal_set_title($node->title . ' : Bouts');
  $output = '';
  return $output;
}
/**
 * Callback function for listing poets in tournament.
 */
function iwps_poet_list($node) {
  drupal_set_title($node->title . ' : Poets');
  $poets = array();
  $names = array();
  $output = '';
  if (isset($node->field_competing_poets[$node->language])) {
    foreach ($node->field_competing_poets[$node->language] as  $uid){
      $poets[] = $uid['uid'];
    }
    $users = user_load_multiple($poets);
    foreach ($users as $uid => $user) {
      $names[] = $user->name;
    }
    if (count($poets) > 0) {
      $output .= theme('item_list', array('items' => $names, 'title' => t('Competing Poets')));
    }
    else {
      $output .= t('No poets added to roster yet.');
    }
  }
  return $output;
}

/**
 * Show scores
 * List performances in bout
 * Assign ranks
 */
/**
 * Implements hook_view().
 */
function iwps_node_view($node, $view_mode) {
  $bout_type = NULL;
  if (isset($node->field_bout_type[$node->language])) {
    $bout_type = $node->field_bout_type[$node->language][0]['value'];
  }
  if ($view_mode == 'full' && $bout_type == 'individual') {
    // load the schematic
          
     $users = _load_users_by_bout_number($node->nid);   

     if (count($users) <= 0) {
      $node->content['scores'] = array(
        '#markup' => t('The draw is not yet complete.'),
        '#weight' => 100,
      );
    }
    else {
      $bout_term_arr = field_get_items('node', $node, 'field_bout');
      $bout_id = $bout_term_arr[0]['tid'];

      $userobjects = user_load_multiple($users);

      $header = array(t('Performer'), t('Score'), t('Rank*'));

      
      // Handle Rotation 1 
      $output = '<h2>Rotation 1</h2>';
      $scores = array();
      $rows = array();

      foreach ($userobjects as $uid => $u) {
        // check if there are existing scores for this user
        // TODO this could be one call to save DB loads
        $score = _load_performances_in_bout($bout_id, 1, $u->uid);
        $tid = $node->field_bout;
        // push score after this
        $row = array(
          'performer' => l($u->name, 'user/' . $u->uid),
          'score' => count($score) ? $score->field_score[$node->language][0]['value'] : '' ,
          'rank' => '',
        );
        // add rank
        if ($score) {
          $ranks = _iwps_get_ranks_in_bout_rotation($bout_id, 1, 'ASSOC');
          $row['rank'] = $ranks[$u->uid]['rank'];
        }
    
        if (user_access('scores admin')) {
          if($score) {
            $row['action'] =  l('Edit', 'node/' . $score->nid . '/edit/performer/' . $u->uid . '/bout/' . $node->nid . '/1') ;
          }
          else {
            $row['action'] =  l('Add', 'node/add/individual-performance/performer/' . $u->uid . '/bout/' . $node->nid . '/1');
          }
        }
        $rows[] = $row;
        // check if user has admin access,
        // push action column if so
      }

      // check if user has admin access to scores
      // add "action" column if so
      if (user_access('scores admin')) {
        $header[] = t('Action');
      }

      $output .= theme('table', array('header' => $header, 'rows' => $rows));
      $output .= t('<p class="small">* Rank in rotation</p>');
      $node->content['scores'] = array(
        '#markup' => $output,
        '#weight' => 100,
      );

    }
  }
  return $node;
}

/**
 * Implements hook_theme().
 */
function iwps_theme() {
  return array(
    'scores' => array(
      'variables' => array('performer' => NULL, 'score' => NULL),
      'template' => 'scores',
      ),
    );
}

